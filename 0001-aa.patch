From 85c5599d115ca4288963403f6ee48142eda7a801 Mon Sep 17 00:00:00 2001
From: fillt <fillthin@gmail.com>
Date: Thu, 2 Jan 2014 11:36:29 +0800
Subject: [PATCH] aa

aa
---
 .gitattributes                            |  22 +++
 .gitignore                                | 215 +++++++++++++++++++++++++++
 MySocket/src/com/socket/ServerWindow.java |  87 +++++++++++
 MySocket/src/com/socket/SocketServer.java | 239 ++++++++++++++++++++++++++++++
 MySocket/src/com/socket/StreamTool.java   |  76 ++++++++++
 readme                                    |   0
 6 files changed, 639 insertions(+)
 create mode 100644 .gitattributes
 create mode 100644 .gitignore
 create mode 100644 MySocket/src/com/socket/ServerWindow.java
 create mode 100644 MySocket/src/com/socket/SocketServer.java
 create mode 100644 MySocket/src/com/socket/StreamTool.java
 create mode 100644 readme

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..412eeda
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,22 @@
+# Auto detect text files and perform LF normalization
+* text=auto
+
+# Custom for Visual Studio
+*.cs     diff=csharp
+*.sln    merge=union
+*.csproj merge=union
+*.vbproj merge=union
+*.fsproj merge=union
+*.dbproj merge=union
+
+# Standard to msysgit
+*.doc	 diff=astextplain
+*.DOC	 diff=astextplain
+*.docx diff=astextplain
+*.DOCX diff=astextplain
+*.dot  diff=astextplain
+*.DOT  diff=astextplain
+*.pdf  diff=astextplain
+*.PDF	 diff=astextplain
+*.rtf	 diff=astextplain
+*.RTF	 diff=astextplain
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..b9d6bd9
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,215 @@
+#################
+## Eclipse
+#################
+
+*.pydevproject
+.project
+.metadata
+bin/
+tmp/
+*.tmp
+*.bak
+*.swp
+*~.nib
+local.properties
+.classpath
+.settings/
+.loadpath
+
+# External tool builders
+.externalToolBuilders/
+
+# Locally stored "Eclipse launch configurations"
+*.launch
+
+# CDT-specific
+.cproject
+
+# PDT-specific
+.buildpath
+
+
+#################
+## Visual Studio
+#################
+
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+
+# User-specific files
+*.suo
+*.user
+*.sln.docstates
+
+# Build results
+
+[Dd]ebug/
+[Rr]elease/
+x64/
+build/
+[Bb]in/
+[Oo]bj/
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+*_i.c
+*_p.c
+*.ilk
+*.meta
+*.obj
+*.pch
+*.pdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.tmp_proj
+*.log
+*.vspscc
+*.vssscc
+.builds
+*.pidb
+*.log
+*.scc
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opensdf
+*.sdf
+*.cachefile
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+
+# Guidance Automation Toolkit
+*.gpState
+
+# ReSharper is a .NET coding add-in
+_ReSharper*/
+*.[Rr]e[Ss]harper
+
+# TeamCity is a build add-in
+_TeamCity*
+
+# DotCover is a Code Coverage Tool
+*.dotCover
+
+# NCrunch
+*.ncrunch*
+.*crunch*.local.xml
+
+# Installshield output folder
+[Ee]xpress/
+
+# DocProject is a documentation generator add-in
+DocProject/buildhelp/
+DocProject/Help/*.HxT
+DocProject/Help/*.HxC
+DocProject/Help/*.hhc
+DocProject/Help/*.hhk
+DocProject/Help/*.hhp
+DocProject/Help/Html2
+DocProject/Help/html
+
+# Click-Once directory
+publish/
+
+# Publish Web Output
+*.Publish.xml
+*.pubxml
+
+# NuGet Packages Directory
+## TODO: If you have NuGet Package Restore enabled, uncomment the next line
+#packages/
+
+# Windows Azure Build Output
+csx
+*.build.csdef
+
+# Windows Store app package directory
+AppPackages/
+
+# Others
+sql/
+*.Cache
+ClientBin/
+[Ss]tyle[Cc]op.*
+~$*
+*~
+*.dbmdl
+*.[Pp]ublish.xml
+*.pfx
+*.publishsettings
+
+# RIA/Silverlight projects
+Generated_Code/
+
+# Backup & report files from converting an old project file to a newer
+# Visual Studio version. Backup files are not needed, because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+UpgradeLog*.htm
+
+# SQL Server files
+App_Data/*.mdf
+App_Data/*.ldf
+
+#############
+## Windows detritus
+#############
+
+# Windows image file caches
+Thumbs.db
+ehthumbs.db
+
+# Folder config file
+Desktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Mac crap
+.DS_Store
+
+
+#############
+## Python
+#############
+
+*.py[co]
+
+# Packages
+*.egg
+*.egg-info
+dist/
+build/
+eggs/
+parts/
+var/
+sdist/
+develop-eggs/
+.installed.cfg
+
+# Installer logs
+pip-log.txt
+
+# Unit test / coverage reports
+.coverage
+.tox
+
+#Translations
+*.mo
+
+#Mr Developer
+.mr.developer.cfg
diff --git a/MySocket/src/com/socket/ServerWindow.java b/MySocket/src/com/socket/ServerWindow.java
new file mode 100644
index 0000000..6a916be
--- /dev/null
+++ b/MySocket/src/com/socket/ServerWindow.java
@@ -0,0 +1,87 @@
+package com.socket;
+
+import java.awt.BorderLayout;
+import java.awt.Frame;
+import java.awt.Label;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
+
+public class ServerWindow extends Frame
+{
+	private SocketServer server;
+	private Label label;
+
+	public ServerWindow(String title)
+	{
+		super(title);
+		server = new SocketServer(8787);
+		label = new Label();
+		add(label, BorderLayout.PAGE_START);
+		label.setText("服务器已经启动");
+		this.addWindowListener(new WindowListener()
+		{
+			@Override
+			public void windowOpened(WindowEvent e)
+			{
+				new Thread(new Runnable()
+				{
+					@Override
+					public void run()
+					{
+						try
+						{
+							server.start();
+						}
+						catch (Exception e)
+						{
+							e.printStackTrace();
+						}
+					}
+				}).start();
+			}
+
+			@Override
+			public void windowIconified(WindowEvent e)
+			{
+			}
+
+			@Override
+			public void windowDeiconified(WindowEvent e)
+			{
+			}
+
+			@Override
+			public void windowDeactivated(WindowEvent e)
+			{
+			}
+
+			@Override
+			public void windowClosing(WindowEvent e)
+			{
+				server.quit();
+				System.exit(0);
+			}
+
+			@Override
+			public void windowClosed(WindowEvent e)
+			{
+			}
+
+			@Override
+			public void windowActivated(WindowEvent e)
+			{
+			}
+		});
+	}
+
+	/**
+	 * @param args
+	 */
+	public static void main(String[] args)
+	{
+		ServerWindow window = new ServerWindow("文件上传服务端");
+		window.setSize(300, 300);
+		window.setVisible(true);
+	}
+
+}
diff --git a/MySocket/src/com/socket/SocketServer.java b/MySocket/src/com/socket/SocketServer.java
new file mode 100644
index 0000000..12c33b1
--- /dev/null
+++ b/MySocket/src/com/socket/SocketServer.java
@@ -0,0 +1,239 @@
+package com.socket;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PushbackInputStream;
+import java.io.RandomAccessFile;
+import java.net.ServerSocket;
+import java.net.Socket;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Properties;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+/**
+ * socket服务器
+ * @author Administrator
+ *
+ */
+public class SocketServer
+{
+	private ExecutorService executorService;// 线程池
+	private ServerSocket ss = null;
+	private int port;// 监听端口
+	private boolean quit;// 是否退出
+	private Map<Long, FileLog> datas = new HashMap<Long, FileLog>();// 存放断点数据，最好改为数据库存放
+
+	public SocketServer(int port)
+	{
+		this.port = port;
+		// 初始化线程池
+		executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 50);
+	}
+
+	// 启动服务
+	public void start() throws Exception
+	{
+		ss = new ServerSocket(port);
+		while (!quit)
+		{
+			Socket socket = ss.accept();// 接受客户端的请求
+			// 为支持多用户并发访问，采用线程池管理每一个用户的连接请求
+			executorService.execute(new SocketTask(socket));// 启动一个线程来处理请求
+		}
+	}
+
+	// 退出
+	public void quit()
+	{
+		this.quit = true;
+		try
+		{
+			ss.close();
+		}
+		catch (IOException e)
+		{
+			e.printStackTrace();
+		}
+	}
+
+	public static void main(String[] args) throws Exception
+	{
+		SocketServer server = new SocketServer(8787);
+		server.start();
+	}
+
+	private class SocketTask implements Runnable
+	{
+		private Socket socket;
+
+		public SocketTask(Socket socket)
+		{
+			this.socket = socket;
+		}
+
+		@Override
+		public void run()
+		{
+			try
+			{
+				System.out.println("accepted connenction from " + socket.getInetAddress() + " @ " + socket.getPort());
+				PushbackInputStream inStream = new PushbackInputStream(socket.getInputStream());
+				// 得到客户端发来的第一行协议数据：Content-Length=143253434;filename=xxx.3gp;sourceid=
+				// 如果用户初次上传文件，sourceid的值为空。
+				String head = StreamTool.readLine(inStream);
+				System.out.println(head);
+				if (head != null)
+				{
+					// 下面从协议数据中读取各种参数值
+					String[] items = head.split(";");
+					String filelength = items[0].substring(items[0].indexOf("=") + 1);
+					String filename = items[1].substring(items[1].indexOf("=") + 1);
+					String sourceid = items[2].substring(items[2].indexOf("=") + 1);
+					Long id = System.currentTimeMillis();
+					FileLog log = null;
+					if (null != sourceid && !"".equals(sourceid))
+					{
+						id = Long.valueOf(sourceid);
+						log = find(id);// 查找上传的文件是否存在上传记录
+					}
+					File file = null;
+					int position = 0;
+					if (log == null)
+					{// 如果上传的文件不存在上传记录,为文件添加跟踪记录
+						String path = new SimpleDateFormat("yyyy/MM/dd/HH/mm").format(new Date());
+						File dir = new File("file/" + path);
+						if (!dir.exists())
+							dir.mkdirs();
+						file = new File(dir, filename);
+						if (file.exists())
+						{// 如果上传的文件发生重名，然后进行改名
+							filename = filename.substring(0, filename.indexOf(".") - 1) + dir.listFiles().length + filename.substring(filename.indexOf("."));
+							file = new File(dir, filename);
+						}
+						save(id, file);
+					}
+					else
+					{// 如果上传的文件存在上传记录,读取上次的断点位置
+						file = new File(log.getPath());// 从上传记录中得到文件的路径
+						if (file.exists())
+						{
+							File logFile = new File(file.getParentFile(), file.getName() + ".log");
+							if (logFile.exists())
+							{
+								Properties properties = new Properties();
+								properties.load(new FileInputStream(logFile));
+								position = Integer.valueOf(properties.getProperty("length"));// 读取断点位置
+							}
+						}
+					}
+
+					OutputStream outStream = socket.getOutputStream();
+					String response = "sourceid=" + id + ";position=" + position + "\r\n";
+					// 服务器收到客户端的请求信息后，给客户端返回响应信息：sourceid=1274773833264;position=0
+					// sourceid由服务生成，唯一标识上传的文件，position指示客户端从文件的什么位置开始上传
+					outStream.write(response.getBytes());
+
+					RandomAccessFile fileOutStream = new RandomAccessFile(file, "rwd");
+					if (position == 0)
+						fileOutStream.setLength(Integer.valueOf(filelength));// 设置文件长度
+					fileOutStream.seek(position);// 移动文件指定的位置开始写入数据
+					byte[] buffer = new byte[1024];
+					int len = -1;
+					int length = position;
+					while ((len = inStream.read(buffer)) != -1)
+					{// 从输入流中读取数据写入到文件中
+						fileOutStream.write(buffer, 0, len);
+						length += len;
+						Properties properties = new Properties();
+						properties.put("length", String.valueOf(length));
+						FileOutputStream logFile = new FileOutputStream(new File(file.getParentFile(), file.getName() + ".log"));
+						properties.store(logFile, null);// 实时记录文件的最后保存位置
+						logFile.close();
+					}
+					if (length == fileOutStream.length())
+						delete(id);
+					fileOutStream.close();
+					inStream.close();
+					outStream.close();
+					file = null;
+				}
+			}
+			catch (Exception e)
+			{
+				e.printStackTrace();
+			}
+			finally
+			{
+				try
+				{
+					if (socket != null && !socket.isClosed())
+						socket.close();
+				}
+				catch (IOException e)
+				{
+				}
+			}
+		}
+
+	}
+
+	public FileLog find(Long sourceid)
+	{
+		return datas.get(sourceid);
+	}
+
+	// 保存上传记录
+	public void save(Long id, File saveFile)
+	{
+		// 日后可以改成通过数据库存放
+		datas.put(id, new FileLog(id, saveFile.getAbsolutePath()));
+	}
+
+	// 当文件上传完毕，删除记录
+	public void delete(long sourceid)
+	{
+		if (datas.containsKey(sourceid))
+			datas.remove(sourceid);
+	}
+
+	private class FileLog
+	{
+		private Long id;
+		private String path;
+
+		public FileLog(Long id, String path)
+		{
+			super();
+			this.id = id;
+			this.path = path;
+		}
+
+		public Long getId()
+		{
+			return id;
+		}
+
+		public void setId(Long id)
+		{
+			this.id = id;
+		}
+
+		public String getPath()
+		{
+			return path;
+		}
+
+		public void setPath(String path)
+		{
+			this.path = path;
+		}
+
+	}
+}
diff --git a/MySocket/src/com/socket/StreamTool.java b/MySocket/src/com/socket/StreamTool.java
new file mode 100644
index 0000000..cd133cc
--- /dev/null
+++ b/MySocket/src/com/socket/StreamTool.java
@@ -0,0 +1,76 @@
+package com.socket;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PushbackInputStream;
+
+public class StreamTool
+{
+
+	public static void save(File file, byte[] data) throws Exception
+	{
+		FileOutputStream outStream = new FileOutputStream(file);
+		outStream.write(data);
+		outStream.close();
+	}
+
+	public static String readLine(PushbackInputStream in) throws IOException
+	{
+		char buf[] = new char[128];
+		int room = buf.length;
+		int offset = 0;
+		int c;
+		loop: while (true)
+		{
+			switch (c = in.read())
+			{
+			case -1:
+			case '\n':
+				break loop;
+			case '\r':
+				int c2 = in.read();
+				if ((c2 != '\n') && (c2 != -1))
+					in.unread(c2);
+				break loop;
+			default:
+				if (--room < 0)
+				{
+					char[] lineBuffer = buf;
+					buf = new char[offset + 128];
+					room = buf.length - offset - 1;
+					System.arraycopy(lineBuffer, 0, buf, 0, offset);
+
+				}
+				buf[offset++] = (char) c;
+				break;
+			}
+		}
+		if ((c == -1) && (offset == 0))
+			return null;
+		return String.copyValueOf(buf, 0, offset);
+	}
+
+	/**
+	 * 读取流
+	 * 
+	 * @param inStream
+	 * @return 字节数组
+	 * @throws Exception
+	 */
+	public static byte[] readStream(InputStream inStream) throws Exception
+	{
+		ByteArrayOutputStream outSteam = new ByteArrayOutputStream();
+		byte[] buffer = new byte[1024];
+		int len = -1;
+		while ((len = inStream.read(buffer)) != -1)
+		{
+			outSteam.write(buffer, 0, len);
+		}
+		outSteam.close();
+		inStream.close();
+		return outSteam.toByteArray();
+	}
+}
diff --git a/readme b/readme
new file mode 100644
index 0000000..e69de29
-- 
1.8.5.2.msysgit.0

